From ea666f182f70acc6fcda3c48bd60216ae8ccc09d Mon Sep 17 00:00:00 2001
From: Andrew McOlash <amcolash@gmail.com>
Date: Sun, 3 Dec 2017 16:12:25 -0600
Subject: [PATCH] Add in UVPlanGeometry helper

---
 src/geometries/Geometries.js           |   1 +
 src/geometries/UVPlaneGeometry.js      | 144 +++++++++++++++++++++++++++++++++
 src/loaders/ObjectLoader.js            |  16 ++++
 src/renderers/webgl/WebGLBackground.js |   1 +
 4 files changed, 162 insertions(+)
 create mode 100644 src/geometries/UVPlaneGeometry.js

diff --git a/src/geometries/Geometries.js b/src/geometries/Geometries.js
index c374cb5..a30cd24 100644
--- a/src/geometries/Geometries.js
+++ b/src/geometries/Geometries.js
@@ -12,6 +12,7 @@ export { TextGeometry, TextBufferGeometry } from './TextGeometry.js';
 export { SphereGeometry, SphereBufferGeometry } from './SphereGeometry.js';
 export { RingGeometry, RingBufferGeometry } from './RingGeometry.js';
 export { PlaneGeometry, PlaneBufferGeometry } from './PlaneGeometry.js';
+export { UVPlaneGeometry, UVPlaneBufferGeometry } from './UVPlaneGeometry.js';
 export { LatheGeometry, LatheBufferGeometry } from './LatheGeometry.js';
 export { ShapeGeometry, ShapeBufferGeometry } from './ShapeGeometry.js';
 export { ExtrudeGeometry, ExtrudeBufferGeometry } from './ExtrudeGeometry.js';
diff --git a/src/geometries/UVPlaneGeometry.js b/src/geometries/UVPlaneGeometry.js
new file mode 100644
index 0000000..9169079
--- /dev/null
+++ b/src/geometries/UVPlaneGeometry.js
@@ -0,0 +1,144 @@
+/**
+ * @author mrdoob / http://mrdoob.com/
+ * @author Mugen87 / https://github.com/Mugen87
+ * @author amcolash / http://amcolash.com
+ */
+
+import { Geometry } from '../core/Geometry.js';
+import { BufferGeometry } from '../core/BufferGeometry.js';
+import { Float32BufferAttribute } from '../core/BufferAttribute.js';
+
+// UVPlaneGeometry
+
+function UVPlaneGeometry( width, height, widthSegments, heightSegments, uStart, uEnd, vStart, vEnd ) {
+
+	Geometry.call( this );
+
+	this.type = 'UVPlaneGeometry';
+
+	this.parameters = {
+		width: width,
+		height: height,
+		widthSegments: widthSegments,
+		heightSegments: heightSegments,
+		uStart: uStart,
+		uEnd: uEnd,
+		vStart: vStart,
+		vEnd: vEnd
+	};
+
+	this.fromBufferGeometry( new UVPlaneBufferGeometry( width, height, widthSegments, heightSegments, uStart, uEnd, vStart, vEnd ) );
+	this.mergeVertices();
+
+}
+
+UVPlaneGeometry.prototype = Object.create( Geometry.prototype );
+UVPlaneGeometry.prototype.constructor = UVPlaneGeometry;
+
+// UVPlaneBufferGeometry
+
+function UVPlaneBufferGeometry( width, height, widthSegments, heightSegments, uStart, uEnd, vStart, vEnd ) {
+
+	BufferGeometry.call( this );
+
+	this.type = 'UVPlaneBufferGeometry';
+
+	this.parameters = {
+		width: width,
+		height: height,
+		widthSegments: widthSegments,
+		heightSegments: heightSegments,
+		uStart: uStart,
+		uEnd: uEnd,
+		vStart: vStart,
+		vEnd: vEnd
+	};
+
+	width = width || 1;
+	height = height || 1;
+	
+	// ASSUMPTION: you are going from smaller to larger uvs, i.e. uStart < uEnd
+	uStart = uStart || 0;
+	uEnd = uEnd || 1;
+	vStart = vStart || 0;
+	vEnd = vEnd || 1;
+
+	var uSize = Math.abs(uEnd - uStart);
+	var vSize = Math.abs(vEnd - vStart);
+
+	var width_half = width / 2;
+	var height_half = height / 2;
+
+	var gridX = Math.floor( widthSegments ) || 1;
+	var gridY = Math.floor( heightSegments ) || 1;
+
+	var gridX1 = gridX + 1;
+	var gridY1 = gridY + 1;
+
+	var segment_width = width / gridX;
+	var segment_height = height / gridY;
+
+	var ix, iy;
+
+	// buffers
+
+	var indices = [];
+	var vertices = [];
+	var normals = [];
+	var uvs = [];
+
+	// generate vertices, normals and uvs
+
+	for ( iy = 0; iy < gridY1; iy ++ ) {
+
+		var y = iy * segment_height - height_half;
+
+		for ( ix = 0; ix < gridX1; ix ++ ) {
+
+			var x = ix * segment_width - width_half;
+
+			vertices.push( x, - y, 0 );
+
+			normals.push( 0, 0, 1 );
+
+			uvs.push( (ix / gridX) * uSize + uStart );
+			uvs.push( (1 - ( iy / gridY )) * vSize + vStart );
+
+		}
+
+	}
+
+	// indices
+
+	for ( iy = 0; iy < gridY; iy ++ ) {
+
+		for ( ix = 0; ix < gridX; ix ++ ) {
+
+			var a = ix + gridX1 * iy;
+			var b = ix + gridX1 * ( iy + 1 );
+			var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
+			var d = ( ix + 1 ) + gridX1 * iy;
+
+			// faces
+
+			indices.push( a, b, d );
+			indices.push( b, c, d );
+
+		}
+
+	}
+
+	// build geometry
+
+	this.setIndex( indices );
+	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
+	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
+	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
+
+}
+
+UVPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
+UVPlaneBufferGeometry.prototype.constructor = UVPlaneBufferGeometry;
+
+
+export { UVPlaneGeometry, UVPlaneBufferGeometry };
diff --git a/src/loaders/ObjectLoader.js b/src/loaders/ObjectLoader.js
index d0f0bec..bd708cc 100644
--- a/src/loaders/ObjectLoader.js
+++ b/src/loaders/ObjectLoader.js
@@ -180,6 +180,22 @@ Object.assign( ObjectLoader.prototype, {
 
 						break;
 
+					case 'UVPlaneGeometry':
+					case 'UVPlaneBufferGeometry':
+
+						geometry = new Geometries[ data.type ](
+							data.width,
+							data.height,
+							data.widthSegments,
+							data.heightSegments,
+							data.startU,
+							data.endU,
+							data.startV,
+							data.endV
+						);
+
+						break;
+
 					case 'BoxGeometry':
 					case 'BoxBufferGeometry':
 					case 'CubeGeometry': // backwards compatible
diff --git a/src/renderers/webgl/WebGLBackground.js b/src/renderers/webgl/WebGLBackground.js
index 7d09e21..b2fab83 100644
--- a/src/renderers/webgl/WebGLBackground.js
+++ b/src/renderers/webgl/WebGLBackground.js
@@ -6,6 +6,7 @@ import { BackSide } from '../../constants.js';
 import { OrthographicCamera } from '../../cameras/OrthographicCamera.js';
 import { BoxBufferGeometry } from '../../geometries/BoxGeometry.js';
 import { PlaneBufferGeometry } from '../../geometries/PlaneGeometry.js';
+import { UVPlaneBufferGeometry } from '../../geometries/UVPlaneGeometry.js';
 import { MeshBasicMaterial } from '../../materials/MeshBasicMaterial.js';
 import { ShaderMaterial } from '../../materials/ShaderMaterial.js';
 import { Color } from '../../math/Color.js';
-- 
2.7.4

